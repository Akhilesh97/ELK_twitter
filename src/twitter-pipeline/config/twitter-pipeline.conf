input {
  twitter {
      consumer_key => "<YOUR-KEY>"
      consumer_secret => "<YOUR-KEY>"
      oauth_token => "<YOUR-KEY>"
      oauth_token_secret => "<YOUR-KEY>"
      keywords => [ "random", "word"]
      full_tweet => true
      type => "tweet"
  }
}
filter {
    mutate {
       remove_field => ["contributors", "current_user_retweet", "favorited",
       "filter_level", "geo", "id", "possibly_sensitive", "quoted_status_id",
       "quoted_status_id_str", "quoted_status", "scopes", "retweeted", "source",
       "truncated", "withheld_copyright", "withheld_in_countries",
       "withheld_scope"]
    }
    if([retweeted_status]) {
       mutate {
          add_field => {
             "tweet_content" => "%{[retweeted_status][text]}"
             "is_a_retweet" => true
             "original_tweet_id" => "%{[retweeted_status][id_str]}"
             "original_author_id" => "%{[retweeted_status][user][id_str]}"
             "original_author_pseudo" => "%{[retweeted_status][user][screen_name]}"
             "original_author_name" => "%{[retweeted_status][user][name]}"
             "is_original_author_verified" => "%{[retweeted_status][user][verified]}"
             "original_author_followers_count" => "%{[retweeted_status][user][followers_count]}"
             "original_author_friends_count" => "%{[retweeted_status][user][friends_count]}"
             "is_original_author_protected" => "%{[retweeted_status][user][protected]}"
          }
       }
       date {
          match => ["[retweeted_status][created_at]", "EEE MMM dd HH:mm:ss Z yyyy"]
          target => "original_tweet_created_at"
       }
       date {
          match => [ "[retweeted_status][user][created_at]", "EEE MMM dd HH:mm:ss Z yyyy" ]
          target => "original_author_account_creation"
       }
       ruby {
         code => '
           event.set("original_retweet_count", event.get("[retweeted_status][retweet_count]"))
           event.set("favorite_count", event.get("[retweeted_status][favorite_count]"))
           event.set("tweet_coordinates", event.get("[retweeted_status][coordinates][coordinates]")) if !event.get("[retweeted_status][coordinates][coordinates]").nil?
           event.set("original_reply_to_tweet", event.get("[retweeted_status][in_reply_to_status_id_str]")) if !event.get("[retweeted_status][in_reply_to_status_id_str]").nil?
           event.set("original_reply_to_user_id", event.get("[retweeted_status][in_reply_to_user_id_str]")) if !event.get("[retweeted_status][in_reply_to_user_id_str]").nil?
           event.set("original_reply_to_pseudo", event.get("[retweeted_status][in_reply_to_screen_name]")) if !event.get("[retweeted_status][in_reply_to_screen_name]").nil?
           event.set("original_author_location", event.get("[retweeted_status][user][location]")) if event.get("[retweeted_status][user][location]")
           event.set("original_author_description", event.get("[retweeted_status][user][description]")) if event.get("[retweeted_status][user][description]")
           event.set("original_author_lang", event.get("[retweeted_status][user][lang]")) if event.get("[retweeted_status][user][lang]")
         '
       }
    }
    else{
       mutate {
         add_field => {
            "tweet_content" => "%{[text]}"
            "is_a_retweet" => false
         }
       }
    }
    date {
       match => ["[created_at]", "EEE MMM dd HH:mm:ss Z yyyy"]
       target => "tweet_created_at"
    }
    date {
        match => [ "[user][created_at]", "EEE MMM dd HH:mm:ss Z yyyy" ]
        target => "author_account_creation"
    }
    ruby {
      code => '
        hashtags = []
        user_mentions_id = []
        user_mentions_pseudo = []
        urls = []
        event.get("[entities][hashtags]").each do |hashtag|
          hashtags << hashtag["text"].downcase
        end
        event.get("[entities][user_mentions]").each do |user_mention|
          user_mentions_id << user_mention["id_str"]
          user_mentions_pseudo << user_mention["screen_name"]
        end
        event.get("[entities][urls]").each do |url|
          urls << url["expanded_url"]
        end
        event.set("hashtags", hashtags) if hashtags.any?
        event.set("user_mentions_id", user_mentions_id) if user_mentions_id.any?
        event.set("user_mentions_pseudo", user_mentions_pseudo) if user_mentions_pseudo.any?
        event.set("urls", urls) if urls.any?
        event.set("tweet_lang", event.get("[lang]")) if event.get("[lang]")
        event.set("author_location", event.get("[user][location]")) if event.get("[user][location]")
        event.set("author_description", event.get("[user][description]")) if event.get("[user][description]")
        event.set("author_lang", event.get("[user][lang]")) if event.get("[user][lang]")
        event.set("tweet_coordinates", event.get("[coordinates][coordinates]")) if !event.get("[coordinates][coordinates]").nil?
        event.set("reply_to_tweet", event.get("[in_reply_to_status_id_str]")) if !event.get("[in_reply_to_status_id_str]").nil?
        event.set("reply_to_user_id", event.get("[in_reply_to_user_id_str]")) if !event.get("[in_reply_to_user_id_str]").nil?
        event.set("reply_to_pseudo", event.get("[in_reply_to_screen_name]")) if !event.get("[in_reply_to_screen_name]").nil?

      '
    }
    mutate {
       add_field => {
         "tweet_id" =>  "%{[id_str]}"
         "author_id" => "%{[user][id_str]}"
         "author_pseudo" => "%{[user][screen_name]}"
         "author_name" => "%{[user][name]}"
         "is_author_verified" => "%{[user][verified]}"
         "author_followers_count" => "%{[user][followers_count]}"
         "author_friends_count" => "%{[user][friends_count]}"
         "is_author_protected" => "%{[user][protected]}"
       }
    }
    mutate {
       convert => {
          "original_author_followers_count" => "integer"
          "original_author_friends_count" => "integer"
          "author_followers_count" => "integer"
          "author_friends_count" => "integer"
          "is_author_protected" => "boolean"
          "is_author_verified" => "boolean"
          "is_a_retweet" => "boolean"
          "is_original_author_verified" => "boolean"
          "is_original_author_protected" => "boolean"
       }
    }
    if ([original_author_id]) {
        clone {
          clones => ["author"]
          clones => ["original_author"]
        }
    } else {
        clone {
          clones => ["author"]
        }
    }
    if([type] == "tweet") {
        #rest {
        #   request => {
        #       url => "http://localhost:5000/predict" # Write down your own endpoint
        #       method => "post"
        #       params => {
        #          "submit" => "%{tweet_content}" # The data you send to the API
        #       }
        #       headers => { "Content-Type" => "application/json" }
        #   }
        #   target => 'rest' # The new field in the event that will contain the API result
        #}
        #mutate {
        #   add_field => {
        #      "sentiment" =>  "%{[rest][response]}"
        #  }
        #}
        mutate {
          remove_field => ["original_author_followers_count", "original_author_friends_count",
          "is_original_author_verified", "is_original_author_protected",
          "original_author_pseudo", "original_author_name", "original_author_location",
          "original_author_account_creation", "original_author_description", "original_author_lang",
          "author_followers_count", "author_friends_count", "is_author_verified", "is_author_protected",
          "author_pseudo", "author_name", "author_location", "author_account_creation",
          "author_description", "author_lang", "rest"]
        }
    } else if ([type] == "original_author") {
      mutate {
          remove_field => ["author_followers_count", "author_friends_count", "is_author_verified",
          "is_author_protected", "author_id", "author_pseudo", "author_name", "author_location",
          "author_account_creation", "author_description", "author_lang",
          "tweet_coordinates", "tweet_id", "retweet_count", "original_favorite_count", "tweet_created_at",
          "is_a_retweet", "original_tweet_id", "original_tweet_id", "favorite_count", "tweet_content",
          "original_tweet_created_at", "tweet_lang", "hashtags", "original_reply_to_pseudo",
          "original_reply_to_tweet", "original_reply_to_user_id", "reply_to_pseudo", "reply_to_tweet",
          "reply_to_user_id", "urls", "user_mentions_id", "user_mentions_pseudo", "original_retweet_count"]
      }
      mutate{
        rename => { "original_author_followers_count" => "author_followers_count" }
        rename => { "original_author_friends_count" => "author_friends_count" }
        rename => { "is_original_author_verified" => "is_author_verified" }
        rename => { "is_original_author_protected" => "is_author_protected" }
        rename => { "original_author_id" => "author_id" }
        rename => { "original_author_pseudo" => "author_pseudo" }
        rename => { "original_author_name" => "author_name" }
        rename => { "original_author_location" => "author_location" }
        rename => { "original_author_account_creation" => "author_account_creation" }
        rename => { "original_author_description" => "author_description" }
        rename => { "original_author_lang" => "author_lang" }
      }
    } else if ([type] == "author") {
      mutate {
          remove_field => ["original_author_followers_count", "original_author_friends_count",
          "is_original_author_verified", "is_original_author_protected", "original_author_id",
          "original_author_pseudo", "original_author_name", "original_author_location",
          "original_author_account_creation", "original_author_description", "original_author_lang",
          "tweet_coordinates", "tweet_id", "retweet_count", "original_favorite_count", "tweet_created_at",
          "is_a_retweet", "original_tweet_id", "original_tweet_id", "favorite_count", "tweet_content",
          "original_tweet_created_at", "tweet_lang", "hashtags", "original_reply_to_pseudo",
          "original_reply_to_tweet", "original_reply_to_user_id", "reply_to_pseudo", "reply_to_tweet",
          "reply_to_user_id", "urls", "user_mentions_id", "user_mentions_pseudo", "original_retweet_count"]
      }
    }
    mutate {
      remove_field => ["retweeted_status", "text", "truncated", "created_at",
      "user", "@version", "timestamp_ms", "is_quote_status",
      "extended_entities", "lang", "extended_tweet", "entities", "in_reply_to_screen_name",
      "coordinates", "in_reply_to_status_id_str", "in_reply_to_status_id",
      "place", "display_text_range", "in_reply_to_user_id_str", "in_reply_to_user_id",
      "id_str", "reply_count", "quote_count", "type"]
    }
    mutate {
      rename => { "@timestamp" => "inserted_in_es_at" }
    }
}
output {
  #  stdout {codec => rubydebug} # For debug
  if ([tweet_id]){
    elasticsearch {
      hosts => [ "localhost:9200" ]
      index => "twitter"
      document_type => "tweet"
      document_id => "%{[tweet_id]}"
      template => "template/twitter_template.json"
      template_name => "twitter"
      parent => "%{[author_id]}"
    }
    #   uncomment to allow output to MongoDB
    #mongodb {
    #  isodate => true
    #  database => "tweets"
    #  collection => "tweet"
    #  uri => "mongodb://127.0.0.1:27017"
    #}
  } else {
      elasticsearch {
        hosts => [ "localhost:9200" ]
        index => "twitter"
        document_type => "author"
        document_id => "%{[author_id]}"
        template => "template/twitter_template.json"
        template_name => "twitter"
      }
      #   uncomment to allow output to MongoDB
      #mongodb {
      #  isodate => true
      #  database => "tweets"
      #  collection => "author"
      #  uri => "mongodb://127.0.0.1:27017"
      #}
  }
}
